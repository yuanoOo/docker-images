name: test obbinlog-ce x86_64

on:
  push:
    branches:
      - 'test-*'
  pull_request:
    paths:
      - '.github/workflows/*obbinlog-ce*.yml'
      - 'obbinlog-ce/**'

concurrency:
  group: test-obbinlog-ce-x86-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-obbinlog-ce-x86:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build obbinlog-ce for x86_64
        uses: docker/build-push-action@v6
        with:
          context: ./obbinlog-ce
          platforms: linux/amd64
          file: ./obbinlog-ce/Dockerfile
          push: false
          load: true
          tags: obbinlog-ce:test-x86_64
          build-args: |
            TARGETPLATFORM=linux/amd64

      - name: Clean up build resources
        run: |
          echo "Cleaning up build resources..."
          docker system prune -f
          docker builder prune -f
          echo "Build resources cleaned up"

      - name: Start obbinlog-ce container
        run: |
          echo "Starting obbinlog-ce container..."
          docker run -d \
            --name obbinlog-ce-test \
            -p 2881:2881 \
            -p 2883:2883 \
            -e CLUSTER_NAME=test \
            -e TENANT_NAME=test \
            -e PASSWORD=123456 \
            obbinlog-ce:test-x86_64
          
          echo "Waiting for container to start and be ready..."
          for i in {1..120}; do
            echo "=== Container startup check (attempt $i/120) ==="
            echo "Container status:"
            docker ps --filter name=obbinlog-ce-test || echo "Container not found"
            
            echo "Complete container logs:"
            docker logs obbinlog-ce-test 2>/dev/null || echo "No logs available yet"
            
            if docker logs obbinlog-ce-test 2>/dev/null | grep -q "Container will keep running"; then
              echo "✅ Container is ready! (attempt $i/120)"
              break
            fi
            
            echo "⏳ Container not ready yet, waiting 5 seconds..."
            echo "================================================"
            sleep 5
          done
          
          echo "Final container status:"
          docker ps
          echo "Complete container logs:"
          docker logs obbinlog-ce-test

      - name: Install MySQL client
        run: |
          echo "Installing MySQL client..."
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Test database connection and binlog
        run: |
          echo "Testing database connection and binlog functionality..."
          
          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          for i in {1..60}; do
            echo "Attempting database connection (attempt $i/60)..."
            if mysql -h127.0.0.1 -P2881 -uroot -p123456 -e "SELECT 1;" 2>/dev/null; then
              echo "Database is ready!"
              break
            else
              echo "Connection failed (attempt $i/60). Error:"
              mysql -h127.0.0.1 -P2881 -uroot -p123456 -e "SELECT 1;" 2>&1 || true
              echo "Waiting 10 seconds before next attempt..."
            fi
            sleep 10
          done
          
          # Test sys tenant connection
          echo "Testing sys tenant connection..."
          mysql -h127.0.0.1 -P2881 -uroot -p123456 -e "SHOW DATABASES;"
          
          # Test test tenant connection via OBProxy (port 2883)
          echo "Testing test tenant connection via OBProxy..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "SHOW DATABASES;"
          
          # Test basic SQL operations via OBProxy
          echo "Testing basic SQL operations via OBProxy..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            CREATE DATABASE IF NOT EXISTS test_db;
            USE test_db;
            CREATE TABLE IF NOT EXISTS test_table (id INT, name VARCHAR(50));
            INSERT INTO test_table VALUES (1, 'test_value');
            SELECT * FROM test_table;
            DROP TABLE test_table;
            DROP DATABASE test_db;
          "
          
          # Test binlog functionality
          echo "=== Testing Binlog Functionality ==="
          
          # Wait for binlog service to be ready
          echo "1. Waiting for binlog service to be ready..."
          sleep 30
          
          # Check initial binlog status
          echo "2. Checking initial binlog status..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            SHOW VARIABLES LIKE 'log_bin';
            SHOW VARIABLES LIKE 'binlog_format';
            SHOW BINARY LOGS;
          "
          
          # Get initial binlog position
          echo "3. Getting initial binlog position..."
          INITIAL_POSITION=$(mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -s -e "SHOW MASTER STATUS\G" | grep "Position:" | awk '{print $2}')
          echo "Initial binlog position: $INITIAL_POSITION"
          
          # Create test database and table for binlog testing
          echo "4. Creating test database and table for binlog testing..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            CREATE DATABASE IF NOT EXISTS binlog_test_db;
            USE binlog_test_db;
            CREATE TABLE IF NOT EXISTS binlog_test_table (
              id INT AUTO_INCREMENT PRIMARY KEY,
              name VARCHAR(100),
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
          "
          
          # Get position before insert
          echo "5. Getting binlog position before insert..."
          POS_BEFORE_INSERT=$(mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -s -e "SHOW MASTER STATUS\G" | grep "Position:" | awk '{print $2}')
          echo "Position before insert: $POS_BEFORE_INSERT"
          
          # Insert test data
          echo "6. Inserting test data to generate binlog events..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            USE binlog_test_db;
            INSERT INTO binlog_test_table (name) VALUES ('test_binlog_1');
            INSERT INTO binlog_test_table (name) VALUES ('test_binlog_2');
            INSERT INTO binlog_test_table (name) VALUES ('test_binlog_3');
          "
          
          # Get position after insert
          echo "7. Getting binlog position after insert..."
          POS_AFTER_INSERT=$(mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -s -e "SHOW MASTER STATUS\G" | grep "Position:" | awk '{print $2}')
          echo "Position after insert: $POS_AFTER_INSERT"
          
          # Check if position changed
          if [ "$POS_BEFORE_INSERT" != "$POS_AFTER_INSERT" ]; then
            echo "✅ Binlog position changed successfully!"
            echo "Position change: $POS_BEFORE_INSERT -> $POS_AFTER_INSERT"
          else
            echo "❌ Binlog position did not change!"
            exit 1
          fi
          
          # Show binlog events
          echo "8. Showing binlog events..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            SHOW BINLOG EVENTS;
          "
          
          # Test DDL operations
          echo "9. Testing DDL operations for binlog..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            USE binlog_test_db;
            ALTER TABLE binlog_test_table ADD COLUMN description TEXT;
            UPDATE binlog_test_table SET description = 'updated description' WHERE id = 1;
            DELETE FROM binlog_test_table WHERE id = 3;
          "
          
          # Get final position
          echo "10. Getting final binlog position..."
          FINAL_POSITION=$(mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -s -e "SHOW MASTER STATUS\G" | grep "Position:" | awk '{print $2}')
          echo "Final binlog position: $FINAL_POSITION"
          
          # Show final binlog events
          echo "11. Showing final binlog events..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            SHOW BINLOG EVENTS;
          "
          
          # Cleanup test database
          echo "12. Cleaning up test database..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            DROP DATABASE IF EXISTS binlog_test_db;
          "
          
          echo "✅ Binlog testing completed successfully!"

      - name: Check container logs
        if: always()
        run: |
          echo "Container logs:"
          docker logs obbinlog-ce-test

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker stop obbinlog-ce-test || true
          docker rm obbinlog-ce-test || true
          docker rmi obbinlog-ce:test-x86_64 || true
          docker system prune -f || true
          echo "Cleanup completed" 