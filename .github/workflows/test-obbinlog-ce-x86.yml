name: test obbinlog-ce x86_64

on:
  push:
    branches:
      - 'test-*'
  pull_request:
    paths:
      - '.github/workflows/*obbinlog-ce*.yml'
      - 'obbinlog-ce/**'

concurrency:
  group: test-obbinlog-ce-x86-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-obbinlog-ce-x86:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build obbinlog-ce for x86_64
        uses: docker/build-push-action@v6
        with:
          context: ./obbinlog-ce
          platforms: linux/amd64
          file: ./obbinlog-ce/Dockerfile
          push: false
          load: true
          tags: obbinlog-ce:test-x86_64
          build-args: |
            TARGETPLATFORM=linux/amd64

      - name: Clean up build resources
        run: |
          echo "Cleaning up build resources..."
          docker system prune -f
          docker builder prune -f
          echo "Build resources cleaned up"

      - name: Start obbinlog-ce container
        run: |
          echo "Starting obbinlog-ce container..."
          docker run -d \
            --name obbinlog-ce-test \
            -p 2881:2881 \
            -p 2883:2883 \
            -e CLUSTER_NAME=test \
            -e TENANT_NAME=test \
            -e PASSWORD=123456 \
            obbinlog-ce:test-x86_64
          
          echo "Waiting for container to start and be ready..."
          for i in {1..120}; do
            echo "=== Container startup check (attempt $i/120) ==="
            echo "Container status:"
            docker ps --filter name=obbinlog-ce-test || echo "Container not found"
            
            echo "Complete container logs:"
            docker logs obbinlog-ce-test 2>/dev/null || echo "No logs available yet"
            
            if docker logs obbinlog-ce-test 2>/dev/null | grep -q "Container will keep running"; then
              echo "✅ Container is ready! (attempt $i/120)"
              break
            fi
            
            echo "⏳ Container not ready yet, waiting 5 seconds..."
            echo "================================================"
            sleep 5
          done
          
          echo "Final container status:"
          docker ps
          echo "Complete container logs:"
          docker logs obbinlog-ce-test

      - name: Extract observer.log
        run: |
          echo "Extracting observer.log from container..."
          
          # Create logs directory
          mkdir -p logs
          
          # Copy observer.log from container
          if docker cp obbinlog-ce-test:/home/admin/oceanbase/store/test/log/observer.log logs/observer.log 2>/dev/null; then
            echo "✅ Successfully extracted observer.log"
            echo "Observer log file size:"
            ls -lh logs/observer.log
            echo "Last 50 lines of observer.log:"
            tail -50 logs/observer.log || echo "No observer.log content"
          else
            echo "❌ Failed to extract observer.log"
            echo "Container filesystem check:"
            docker exec obbinlog-ce-test ls -la /home/admin/oceanbase/store/test/log/ 2>/dev/null || echo "Cannot access log directory"
            
            # Create a placeholder file with error message
            echo "Failed to extract observer.log from container" > logs/observer.log
            echo "Container logs:" >> logs/observer.log
            docker logs obbinlog-ce-test >> logs/observer.log 2>&1 || echo "No container logs available" >> logs/observer.log
          fi
          
          # Also extract other relevant logs
          echo "Extracting additional log files..."
          docker exec obbinlog-ce-test find /home/admin/oceanbase/store/test/log/ -name "*.log" -type f 2>/dev/null | while read logfile; do
            if [ -n "$logfile" ]; then
              echo "Copying: $logfile"
              docker cp "obbinlog-ce-test:$logfile" "logs/$(basename $logfile)" 2>/dev/null || echo "Failed to copy $logfile"
            fi
          done
          
          echo "Available log files:"
          ls -la logs/ || echo "No log files found"

      - name: Upload observer.log as artifact
        uses: actions/upload-artifact@v4
        with:
          name: observer-logs
          path: logs/
          retention-days: 30

      - name: Install MySQL client
        run: |
          echo "Installing MySQL client..."
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Test database connection
        run: |
          echo "Testing database connection..."
          
          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          for i in {1..60}; do
            echo "Attempting database connection (attempt $i/60)..."
            if mysql -h127.0.0.1 -P2881 -uroot -p123456 -e "SELECT 1;" 2>/dev/null; then
              echo "Database is ready!"
              break
            else
              echo "Connection failed (attempt $i/60). Error:"
              mysql -h127.0.0.1 -P2881 -uroot -p123456 -e "SELECT 1;" 2>&1 || true
              echo "Waiting 10 seconds before next attempt..."
            fi
            sleep 10
          done
          
          # Test sys tenant connection
          echo "Testing sys tenant connection..."
          mysql -h127.0.0.1 -P2881 -uroot -p123456 -e "SHOW DATABASES;"
          
          # Test test tenant connection via OBProxy (port 2883)
          echo "Testing test tenant connection via OBProxy..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "SHOW DATABASES;"
          
          # Test basic SQL operations via OBProxy
          echo "Testing basic SQL operations via OBProxy..."
          mysql -h127.0.0.1 -P2883 -uroot@test -p123456 -e "
            CREATE DATABASE IF NOT EXISTS test_db;
            USE test_db;
            CREATE TABLE IF NOT EXISTS test_table (id INT, name VARCHAR(50));
            INSERT INTO test_table VALUES (1, 'test_value');
            SELECT * FROM test_table;
            DROP TABLE test_table;
            DROP DATABASE test_db;
          "

      - name: Check container logs
        if: always()
        run: |
          echo "Container logs:"
          docker logs obbinlog-ce-test

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker stop obbinlog-ce-test || true
          docker rm obbinlog-ce-test || true
          docker rmi obbinlog-ce:test-x86_64 || true
          docker system prune -f || true
          echo "Cleanup completed" 